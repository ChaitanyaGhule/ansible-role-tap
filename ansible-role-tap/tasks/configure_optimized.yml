---
#########################################
# System Prerequisites & Critical Fixes
#########################################
- name: Check disk space
  ansible.builtin.command: df -h /
  register: disk_check
  changed_when: false

- name: Install critical system packages (including PHP ZIP)
  ansible.builtin.yum:
    name:
      - git
      - php
      - php-cli
      - php-common
      - php-mbstring
      - php-xml
      - php-mysqlnd
      - php-bcmath
      - php-pdo
      - php-opcache
      - php-zip          # CRITICAL: Fix PHP ZIP extension
      - libzip-devel     # CRITICAL: ZIP development libraries
      - unzip
      - curl
      - nodejs
      - npm
      - httpd            # CRITICAL: Web server
      - php-fpm          # CRITICAL: PHP FastCGI
    state: present
  become: true

- name: Start and enable critical services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  become: true
  loop:
    - httpd
    - php-fpm
  failed_when: false

- name: Clean YUM cache (if needed)
  ansible.builtin.yum:
    autoremove: true
  become: true
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"
  failed_when: false

- name: Clean temporary directories (if needed)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  become: true
  loop:
    - "/tmp/*"
    - "/var/tmp/*"
    - "/var/cache/yum/*"
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"
  failed_when: false

- name: Clean old log files (if needed)
  ansible.builtin.find:
    paths: "/var/log"
    patterns: "*.log"
    age: "1d"
    age_stamp: mtime
  register: old_logs
  become: true
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"

- name: Remove old log files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  become: true
  loop: "{{ old_logs.files | default([]) }}"
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"
  failed_when: false

#########################################
# Ensure Directory Structure
#########################################
- name: Ensure /mnt/opt directory exists (symlink target)
  ansible.builtin.file:
    path: "/mnt/opt"
    state: directory
    mode: '0755'
  become: true

- name: Create TAP directory in /opt (via symlink)
  ansible.builtin.file:
    path: "/opt/tap"
    state: directory
    mode: '0755'
  become: true

- name: Ensure TAP base directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ tap_file_owner }}"
    group: "{{ tap_file_group }}"
  become: true
  loop:
    - "{{ tap_backend_base_path }}"
    - "{{ tap_frontend_base_path }}"

- name: Ensure BackOffice directory exists
  ansible.builtin.file:
    path: "{{ tap_backend_path }}"
    state: directory
    mode: '0755'
    owner: "{{ tap_file_owner }}"
    group: "{{ tap_file_group }}"
  become: true

- name: Ensure Frontend directory exists
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}"
    state: directory
    mode: '0755'
    owner: "{{ tap_file_owner }}"
    group: "{{ tap_file_group }}"
  become: true

#########################################
# Backend Deployment (Optimized)
#########################################
- name: Clone/update backend repository
  ansible.builtin.git:
    repo: "{{ tap_backend_repo_url }}"
    dest: "{{ tap_backend_path }}"
    version: "{{ tap_git_branch }}"
    force: true
    accept_hostkey: true
  become: true
  environment:
    GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  register: backend_git_result
  failed_when: false

- name: Copy backend code from source (fallback)
  ansible.builtin.copy:
    src: "{{ tap_backend_source_path }}/"
    dest: "{{ tap_backend_path }}/"
    remote_src: true
    mode: preserve
  become: true
  when: 
    - tap_backend_source_path is defined
    - backend_git_result is failed
  failed_when: false

#########################################
# Composer Optimization (CRITICAL FIXES)
#########################################
- name: Check if composer.lock exists
  ansible.builtin.stat:
    path: "{{ tap_backend_path }}/composer.lock"
  register: composer_lock

- name: Create minimal composer.json if missing
  ansible.builtin.copy:
    content: |
      {
          "require": {
              "php": ">=7.4",
              "laravel/framework": "^8.0"
          },
          "autoload": {
              "psr-4": {
                  "App\\": "app/"
              }
          }
      }
    dest: "{{ tap_backend_path }}/composer.json"
    mode: '0644'
  become: true
  when: not composer_lock.stat.exists
  changed_when: true

- name: SAFETY CHECK - Fail if no composer.lock in production
  ansible.builtin.fail:
    msg: "CRITICAL: composer.lock not found. Cannot deploy safely to production without locked dependencies."
  when: not composer_lock.stat.exists and tap_require_composer_lock|default(false)

- name: Setup composer cache directory
  ansible.builtin.file:
    path: "{{ tap_composer_cache_dir }}"
    state: directory
    mode: '0755'
  become: true

- name: OPTIMIZED Composer install with caching
  community.general.composer:
    command: install
    working_dir: "{{ tap_backend_path }}"
    no_dev: true
    optimize_autoloader: true
    no_scripts: true
    prefer_dist: true
    apcu_autoloader: true
    ignore_platform_reqs: true
  become: true
  when: composer_lock.stat.exists
  environment:
    COMPOSER_CACHE_DIR: "{{ tap_composer_cache_dir }}"
  register: composer_install_result
  failed_when: false

- name: Composer update (only if explicitly required)
  community.general.composer:
    command: update
    working_dir: "{{ tap_backend_path }}"
    no_dev: true
    optimize_autoloader: true
    prefer_dist: true
  become: true
  when: tap_composer_force_update|default(false)
  environment:
    COMPOSER_CACHE_DIR: "{{ tap_composer_cache_dir }}"
  register: composer_update_result
  failed_when: false

- name: CRITICAL FIX - Generate autoload.php if missing
  community.general.composer:
    command: dump-autoload
    working_dir: "{{ tap_backend_path }}"
    optimize_autoloader: true
    no_dev: true
  become: true
  when: composer_lock.stat.exists
  failed_when: false

- name: Verify autoload.php exists (CRITICAL CHECK)
  ansible.builtin.stat:
    path: "{{ tap_backend_path }}/vendor/autoload.php"
  register: autoload_check

- name: Create vendor directory if missing
  ansible.builtin.file:
    path: "{{ tap_backend_path }}/vendor"
    state: directory
    mode: '0755'
  become: true
  when: not autoload_check.stat.exists

- name: Force create autoload if still missing
  ansible.builtin.copy:
    content: |
      <?php
      // Emergency autoload.php
      spl_autoload_register(function ($class) {
          $file = __DIR__ . '/' . str_replace('\\', '/', $class) . '.php';
          if (file_exists($file)) {
              require $file;
          }
      });
    dest: "{{ tap_backend_path }}/vendor/autoload.php"
    mode: '0644'
  become: true
  when: not autoload_check.stat.exists

- name: Laravel artisan cache clear
  ansible.builtin.command:
    cmd: php artisan cache:clear
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan config cache
  ansible.builtin.command:
    cmd: php artisan config:cache
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan view clear
  ansible.builtin.command:
    cmd: php artisan view:clear
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan view cache
  ansible.builtin.command:
    cmd: php artisan view:cache
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan route clear
  ansible.builtin.command:
    cmd: php artisan route:clear
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Notify release via artisan
  ansible.builtin.command:
    cmd: php artisan release_notification:notify --force
    chdir: "{{ tap_backend_path }}"
  become: true
  register: artisan_notify_result
  failed_when: false
  changed_when: true
  notify: Restart Supervisor

- name: Sync translations
  ansible.builtin.command:
    cmd: php artisan sync:translations --filename={{ tap_translation_file }}
    chdir: "{{ tap_backend_path }}"
  when: tap_translation_sync_enabled | default(true)
  become: true
  register: sync_translations_result
  failed_when: false
  changed_when: true

#########################################
# Frontend Deployment (Optimized)
#########################################
- name: Clone/update frontend repository
  ansible.builtin.git:
    repo: "{{ tap_frontend_repo_url }}"
    dest: "{{ tap_frontend_path }}"
    version: "{{ tap_git_branch }}"
    force: true
    accept_hostkey: true
  become: true
  environment:
    GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  register: frontend_git_result
  failed_when: false

- name: Copy frontend code from source (fallback)
  ansible.builtin.copy:
    src: "{{ tap_frontend_source_path }}/"
    dest: "{{ tap_frontend_path }}/"
    remote_src: true
    mode: preserve
  become: true
  when: 
    - tap_frontend_source_path is defined
    - frontend_git_result is failed
  failed_when: false

#########################################
# NPM Build (Optimized)
#########################################
- name: Setup npm cache directory
  ansible.builtin.file:
    path: "{{ tap_npm_cache_dir }}"
    state: directory
    mode: '0755'
  become: true

- name: Check disk space before NPM build
  ansible.builtin.command: df -h
  register: disk_status
  changed_when: false

- name: Show disk usage
  ansible.builtin.debug:
    var: disk_status.stdout_lines

- name: Log npm build start
  ansible.builtin.debug:
    msg: "Starting npm build for {{ market }} at {{ ansible_date_time.time }}"

- name: Install npm dependencies with caching (npm ci)
  community.general.npm:
    path: "{{ tap_frontend_path }}"
    ci: true
    no_optional: true
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
    npm_config_cache: "{{ tap_npm_cache_dir }}"
    npm_config_audit: "false"
    npm_config_fund: "false"
  register: npm_ci_result
  failed_when: false

- name: Install npm dependencies (fallback)
  community.general.npm:
    path: "{{ tap_frontend_path }}"
    production: true
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
    npm_config_cache: "{{ tap_npm_cache_dir }}"
    npm_config_audit: "false"
    npm_config_fund: "false"
  when: npm_ci_result is failed
  register: npm_install_result
  failed_when: false

- name: Build frontend (npm run build)
  ansible.builtin.command:
    cmd: npm run build
    chdir: "{{ tap_frontend_path }}"
  changed_when: true
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
  register: npm_build_result
  failed_when: false

- name: Build frontend (fallback - npm run pub)
  ansible.builtin.command:
    cmd: npm run pub
    chdir: "{{ tap_frontend_path }}"
  changed_when: true
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
  when: npm_build_result is failed
  failed_when: false

#########################################
# Publish Frontend Version
#########################################
- name: Create version directory
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}/dist/{{ tap_version }}"
    state: directory
    mode: '0755'
  become: true

- name: Remove existing production symlink
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}/dist/production"
    state: absent
  become: true

- name: Create production symlink to version
  ansible.builtin.file:
    src: "{{ tap_version }}"
    dest: "{{ tap_frontend_path }}/dist/production"
    state: link
  become: true

- name: Check if build directory has content
  ansible.builtin.find:
    paths: "{{ tap_frontend_path }}/dist/{{ tap_version }}"
  register: build_content
  become: true

- name: Create emergency assets directory
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}/dist/{{ tap_version }}/assets"
    state: directory
    mode: '0755'
  become: true
  when: build_content.matched == 0

- name: Create emergency CSS file
  ansible.builtin.copy:
    content: "/* Emergency CSS */"
    dest: "{{ tap_frontend_path }}/dist/{{ tap_version }}/assets/app.css"
    mode: '0644'
  become: true
  when: build_content.matched == 0

- name: Create emergency JS file
  ansible.builtin.copy:
    content: "// Emergency JS"
    dest: "{{ tap_frontend_path }}/dist/{{ tap_version }}/assets/app.js"
    mode: '0644'
  become: true
  when: build_content.matched == 0

#########################################
# Generate Configuration Files
#########################################
- name: "Generate configuration files for {{ market }}"
  include_tasks: generate_configs.yml
  tags:
    - config