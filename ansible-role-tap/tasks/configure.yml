---
#########################################
# System Prerequisites Check
#########################################
- name: Check disk space
  ansible.builtin.command: df -h /
  register: disk_check
  changed_when: false

- name: Clean YUM cache (if needed)
  ansible.builtin.yum:
    autoremove: true
  become: true
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"
  failed_when: false

- name: Clean temporary directories (if needed)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  become: true
  loop:
    - "/tmp/*"
    - "/var/tmp/*"
    - "/var/cache/yum/*"
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"
  failed_when: false

- name: Clean old log files (if needed)
  ansible.builtin.find:
    paths: "/var/log"
    patterns: "*.log,*.gz,*.old"
    age: "1d"
    age_stamp: mtime
  register: old_logs
  become: true
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"

- name: Remove old log files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  become: true
  loop: "{{ old_logs.files | default([]) }}"
  when: "'9' in disk_check.stdout.split('%')[0][-2:] or '100%' in disk_check.stdout"
  failed_when: false

- name: Check disk space after cleanup
  ansible.builtin.command: df -h /
  register: disk_check_after
  changed_when: false

- name: Show disk space status
  ansible.builtin.debug:
    msg: "Disk space: {{ disk_check_after.stdout_lines[1] }}"

#########################################
# Git Prerequisites & Code Pull
#########################################
- name: Install Git
  ansible.builtin.yum:
    name: git
    state: present
  become: true

- name: Remove existing clone directory if exists
  ansible.builtin.file:
    path: "{{ tap_backend_clone_path }}_{{ market }}"
    state: absent
  become: true

- name: Clone repository from Bitbucket (shallow)
  ansible.builtin.git:
    repo: "{{ tap_backend_repo_url }}"
    dest: "{{ tap_backend_clone_path }}_{{ market }}"
    version: "{{ tap_git_branch }}"
    depth: 1
    force: true
    accept_hostkey: true
  become: true
  environment:
    GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    GIT_USERNAME: "{{ vault_bitbucket_username | default(ansible_user) }}"
    GIT_PASSWORD: "{{ vault_bitbucket_password | default('') }}"
  failed_when: false

#########################################
# PHP & Composer Prereqs
#########################################
- name: Install PHP and required packages (offline)
  ansible.builtin.yum:
    name:
      - php
      - php-cli
      - php-common
      - php-mbstring
      - php-xml
      - php-mysqlnd
      - php-bcmath
      - php-pdo
      - php-opcache
      - php-zip
      - unzip
      - curl
    state: present
  become: true

#########################################
# Ensure Directory Structure
#########################################
- name: Ensure TAP base directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ tap_file_owner }}"
    group: "{{ tap_file_group }}"
  become: true
  loop:
    - "{{ tap_backend_base_path }}"
    - "{{ tap_frontend_base_path }}"

- name: Ensure BackOffice directory exists
  ansible.builtin.file:
    path: "{{ tap_backend_path }}"
    state: directory
    mode: '0755'
    owner: "{{ tap_file_owner }}"
    group: "{{ tap_file_group }}"
  become: true

- name: Ensure Frontend directory exists
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}"
    state: directory
    mode: '0755'
    owner: "{{ tap_file_owner }}"
    group: "{{ tap_file_group }}"
  become: true

#########################################
# Backend Deployment (Git Pull + Copy)
#########################################
- name: Check if backend deployment already exists
  ansible.builtin.stat:
    path: "{{ tap_backend_path }}/.git"
  register: backend_git_exists

- name: Clone/update backend repository
  ansible.builtin.git:
    repo: "{{ tap_backend_repo_url }}"
    dest: "{{ tap_backend_path }}"
    version: "{{ tap_git_branch }}"
    force: true
    accept_hostkey: true
  become: true
  environment:
    GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    GIT_USERNAME: "{{ vault_bitbucket_username | default('') }}"
    GIT_PASSWORD: "{{ vault_bitbucket_password | default('') }}"
  register: backend_git_result
  failed_when: false

- name: Check if backend source exists (fallback)
  ansible.builtin.stat:
    path: "{{ tap_backend_source_path }}"
  register: backend_dir

- name: Copy backend code from source (fallback if git fails)
  ansible.builtin.copy:
    src: "{{ tap_backend_source_path }}/"
    dest: "{{ tap_backend_path }}/"
    remote_src: true
  become: true
  when: 
    - backend_dir.stat.exists
    - backend_git_result is failed
  failed_when: false

#########################################
# Laravel Setup: Composer + Artisan
#########################################
- name: Check if composer.lock exists
  ansible.builtin.stat:
    path: "{{ tap_backend_path }}/composer.lock"
  register: composer_lock

- name: Create minimal composer.json if missing
  ansible.builtin.copy:
    content: |
      {
          "require": {
              "php": ">=7.4",
              "laravel/framework": "^8.0"
          },
          "autoload": {
              "psr-4": {
                  "App\\": "app/"
              }
          }
      }
    dest: "{{ tap_backend_path }}/composer.json"
    mode: '0644'
  become: true
  when: not composer_lock.stat.exists
  changed_when: true

- name: Run Composer install (always execute if lock exists)
  community.general.composer:
    command: install
    working_dir: "{{ tap_backend_path }}"
    no_dev: true
    no_scripts: true
    prefer_dist: true
    no_interaction: true
    ignore_platform_reqs: true
  become: true
  when: composer_lock.stat.exists
  register: composer_install_result
  failed_when: false
  retries: 2
  delay: 30

- name: Run Composer update (always execute)
  community.general.composer:
    command: update
    working_dir: "{{ tap_backend_path }}"
    no_dev: true
    optimize_autoloader: true
    prefer_dist: true
    no_interaction: true
  become: true
  register: composer_update_result
  failed_when: false

- name: Verify vendor directory exists
  ansible.builtin.stat:
    path: "{{ tap_backend_path }}/vendor/autoload.php"
  register: autoload_check

- name: Show composer results for debugging
  ansible.builtin.debug:
    msg: "Autoload exists: {{ autoload_check.stat.exists }}"

- name: Check if Laravel framework is installed
  ansible.builtin.stat:
    path: "{{ tap_backend_path }}/vendor/laravel/framework/src/Illuminate/Foundation/Application.php"
  register: laravel_check

- name: Laravel artisan cache clear
  ansible.builtin.command:
    cmd: php artisan cache:clear
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan config cache
  ansible.builtin.command:
    cmd: php artisan config:cache
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan view clear
  ansible.builtin.command:
    cmd: php artisan view:clear
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan view cache
  ansible.builtin.command:
    cmd: php artisan view:cache
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Laravel artisan route clear
  ansible.builtin.command:
    cmd: php artisan route:clear
    chdir: "{{ tap_backend_path }}"
  become: true
  failed_when: false
  changed_when: true

- name: Notify release via artisan
  ansible.builtin.command:
    cmd: php artisan release_notification:notify --force
    chdir: "{{ tap_backend_path }}"
  become: true
  register: artisan_notify_result
  failed_when: false
  changed_when: true
  notify: Restart Supervisor

- name: Sync translations
  ansible.builtin.command:
    cmd: php artisan sync:translations --filename={{ tap_translation_file }}
    chdir: "{{ tap_backend_path }}"
  when: tap_translation_sync_enabled | default(true)
  become: true
  register: sync_translations_result
  failed_when: false
  changed_when: true

#########################################
# Frontend Deployment (Git Pull + Copy)
#########################################
- name: Check if frontend deployment already exists
  ansible.builtin.stat:
    path: "{{ tap_frontend_path }}/.git"
  register: frontend_git_exists

- name: Stash frontend changes before update
  ansible.builtin.command:
    cmd: git stash
    chdir: "{{ tap_frontend_path }}"
  become: true
  when: frontend_git_exists.stat.exists
  failed_when: false
  changed_when: false

- name: Clone/update frontend repository
  ansible.builtin.git:
    repo: "{{ tap_frontend_repo_url }}"
    dest: "{{ tap_frontend_path }}"
    version: "{{ tap_git_branch }}"
    force: true
    accept_hostkey: true
  become: true
  environment:
    GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    GIT_USERNAME: "{{ vault_bitbucket_username | default('') }}"
    GIT_PASSWORD: "{{ vault_bitbucket_password | default('') }}"
  register: frontend_git_result
  failed_when: false

- name: Check if frontend source exists (fallback)
  ansible.builtin.stat:
    path: "{{ tap_frontend_source_path }}"
  register: frontend_dir

- name: Copy frontend code from source (fallback if git fails)
  ansible.builtin.copy:
    src: "{{ tap_frontend_source_path }}/"
    dest: "{{ tap_frontend_path }}/"
    remote_src: true
  become: true
  when: 
    - frontend_dir.stat.exists
    - frontend_git_result is failed
  failed_when: false

#########################################
# Build Frontend (NPM)
#########################################
- name: Install Node.js and npm
  ansible.builtin.yum:
    name:
      - nodejs
      - npm
    state: present
  become: true

- name: Check disk space before NPM build
  ansible.builtin.command: df -h
  register: disk_status
  changed_when: false

- name: Show disk usage
  ansible.builtin.debug:
    var: disk_status.stdout_lines

- name: Log npm build start
  ansible.builtin.debug:
    msg: "Starting npm build for {{ market }} at {{ ansible_date_time.time }}"

- name: Install npm dependencies (npm ci)
  community.general.npm:
    path: "{{ tap_frontend_path }}"
    ci: true
    no_optional: true
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
    npm_config_audit: "false"
    npm_config_fund: "false"
  register: npm_ci_result
  failed_when: false
  retries: 2
  delay: 60

- name: Install npm dependencies (fallback)
  community.general.npm:
    path: "{{ tap_frontend_path }}"
    production: true
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
    npm_config_audit: "false"
    npm_config_fund: "false"
  when: npm_ci_result is failed
  register: npm_install_result
  failed_when: false
  retries: 2
  delay: 60

- name: Build frontend (npm run pub)
  community.general.npm:
    path: "{{ tap_frontend_path }}"
    script: pub
  become: true
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
  register: npm_build_result
  failed_when: false
  retries: 2
  delay: 60

#########################################
# Publish Frontend Version
#########################################
- name: Check if version directory exists
  ansible.builtin.stat:
    path: "{{ tap_frontend_path }}/dist/{{ tap_version }}"
  register: version_dir

- name: Create version directory if missing
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}/dist/{{ tap_version }}"
    state: directory
    mode: '0755'
  become: true
  when: not version_dir.stat.exists

- name: Remove existing production symlink
  ansible.builtin.file:
    path: "{{ tap_frontend_path }}/dist/production"
    state: absent
  become: true

- name: Create production symlink to version
  ansible.builtin.file:
    src: "{{ tap_version }}"
    dest: "{{ tap_frontend_path }}/dist/production"
    state: link
  become: true