#########################################
# Git Prerequisites & Code Pull
#########################################
- name: configure | Install Git package
  ansible.builtin.yum:
    name: git
    state: present
  become: true

- name: configure | Remove existing clone directory if exists
  ansible.builtin.file:
    path: "{{ tap_git_clone_path }}"
    state: absent
  become: true

- name: configure | Clone repository from Bitbucket
  ansible.builtin.git:
    repo: "{{ tap_git_repo_url }}"
    dest: "{{ tap_git_clone_path }}"
    version: "{{ tap_git_branch }}"
    force: true
  become: true
  register: tap_git_clone_result
  failed_when: false
  timeout: 60

#########################################
# System Prerequisites Check
#########################################
- name: configure | Get system disk information
  ansible.builtin.setup:
    filter: ansible_mounts
  register: tap_disk_info

- name: configure | Calculate available disk space
  ansible.builtin.set_fact:
    tap_available_space_gb: "{{ (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available / 1024 / 1024 / 1024 }}"
    tap_disk_usage_percent: "{{ ((ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_total - (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available) * 100 / (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_total }}"

- name: configure | Clean YUM cache when disk usage high
  ansible.builtin.yum:
    name: '*'
    state: present
    update_cache: true
    clean: true
  become: true
  when: tap_disk_usage_percent | float > 85
  failed_when: false

- name: configure | Find temporary files for cleanup
  ansible.builtin.find:
    paths:
      - /tmp
      - /var/tmp
      - /var/cache
    patterns: "*"
    file_type: any
    age: 1d
  register: tap_temp_files
  become: true
  when: tap_disk_usage_percent | float > 85
  failed_when: false

- name: configure | Remove old temporary files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ tap_temp_files.files | default([]) }}"
  become: true
  when: tap_disk_usage_percent | float > 85
  failed_when: false

- name: configure | Display disk space status
  ansible.builtin.debug:
    msg: "Available disk space: {{ tap_available_space_gb | float | round(2) }}GB ({{ tap_disk_usage_percent | float | round(1) }}% used)"

#########################################
# Ensure Directory Structure
#########################################
- name: configure | Ensure BackOffice directory exists for {{ market }}
  ansible.builtin.file:
    path: "/mnt/v2-markets/prod_{{ market }}/server/production"
    state: directory
    mode: '0755'
    recurse: true
  become: true

- name: configure | Ensure Frontend directory exists for {{ market }}
  ansible.builtin.file:
    path: "/mnt/www/prod_{{ market }}/nespresso_ev2-client"
    state: directory
    mode: '0755'
    recurse: true
  become: true

#########################################
# Copy Backend Code
#########################################
- name: configure | Determine backend source path for {{ market }}
  ansible.builtin.set_fact:
    tap_actual_backend_path: "{{ tap_backend_fallback_path if (tap_git_clone_result is defined and tap_git_clone_result.failed) else tap_backend_source_path }}"

- name: configure | Check if backend source directory exists for {{ market }}
  ansible.builtin.stat:
    path: "{{ tap_actual_backend_path }}"
  register: tap_backend_source_stat

- name: configure | Check if backend deployment already exists for {{ market }}
  ansible.builtin.stat:
    path: "/v2-markets/prod_{{ market }}/server/production/.git"
  register: tap_backend_git_exists

- name: configure | Git pull latest code for backend deployment {{ market }}
  ansible.builtin.git:
    repo: "{{ tap_backend_repo_url }}"
    dest: "{{ tap_git_clone_path }}_backend_{{ market }}"
    version: "{{ tap_app_git_branch }}"
    force: true
  become: true
  when: tap_backend_git_exists.stat.exists and tap_git_pull_enabled | bool
  register: tap_backend_git_pull
  failed_when: false

- name: configure | Copy updated backend code for {{ market }}
  ansible.builtin.copy:
    src: "{{ tap_git_clone_path }}_backend_{{ market }}/nespresso-test/new_infra_tap_source/back/nespresso_ev2-server-rc-mobile_php81/"
    dest: "/v2-markets/prod_{{ market }}/server/production/"
    remote_src: true
    mode: preserve
  become: true
  when: tap_backend_git_pull is defined and not tap_backend_git_pull.skipped and not (tap_backend_git_pull.failed | default(false))
  register: tap_backend_update_copy

- name: configure | Copy backend code (new deployment) for {{ market }}
  ansible.builtin.copy:
    src: "{{ tap_actual_backend_path }}/"
    dest: "/v2-markets/prod_{{ market }}/server/production/"
    remote_src: true
    mode: preserve
  become: true
  when: tap_backend_source_stat.stat.exists and not tap_backend_git_exists.stat.exists
  register: tap_backend_copy_result

- name: configure | Create minimal backend structure if source missing for {{ market }}
  ansible.builtin.file:
    path: "/mnt/v2-markets/prod_{{ market }}/server/production/composer.json"
    state: touch
    mode: '0644'
  become: true
  when: not tap_backend_source_stat.stat.exists

#########################################
# Laravel Setup: Composer + Artisan
#########################################
- name: configure | Check if composer.lock exists for {{ market }}
  ansible.builtin.stat:
    path: "/v2-markets/prod_{{ market }}/server/production/composer.lock"
  register: tap_composer_lock

- name: configure | Run Composer install for {{ market }}
  community.general.composer:
    command: install
    working_dir: "/v2-markets/prod_{{ market }}/server/production"
    no_dev: true
    no_scripts: true
    prefer_dist: true
    ignore_platform_reqs: true
  become: true
  when: tap_composer_lock.stat.exists
  register: tap_composer_install_result
  failed_when: false
  async: 300
  poll: 10

- name: configure | Run Composer update (matching manual script) for {{ market }}
  community.general.composer:
    command: update
    working_dir: "/v2-markets/prod_{{ market }}/server/production"
    no_dev: false
    optimize_autoloader: true
    prefer_dist: true
  become: true
  when: not tap_composer_lock.stat.exists or tap_backend_git_pull is defined
  register: tap_composer_update_result
  failed_when: false
  async: 900
  poll: 30

#########################################
# Laravel Artisan Commands (from manual script)
#########################################
- name: configure | Clear Laravel cache for {{ market }}
  ansible.builtin.shell: php artisan cache:clear
  args:
    chdir: "/v2-markets/prod_{{ market }}/server/production"
    executable: /bin/bash
  become: true
  register: tap_artisan_cache_clear
  failed_when: false
  changed_when: true
  # Using shell because there's no dedicated ansible module for Laravel Artisan commands

- name: configure | Cache Laravel config for {{ market }}
  ansible.builtin.shell: php artisan config:cache
  args:
    chdir: "/v2-markets/prod_{{ market }}/server/production"
    executable: /bin/bash
  become: true
  register: tap_artisan_config_cache
  failed_when: false
  changed_when: true
  # Using shell because there's no dedicated ansible module for Laravel Artisan commands

- name: configure | Clear and cache Laravel views for {{ market }}
  ansible.builtin.shell: |
    php artisan view:clear
    php artisan view:cache
  args:
    chdir: "/v2-markets/prod_{{ market }}/server/production"
    executable: /bin/bash
  become: true
  register: tap_artisan_view_cache
  failed_when: false
  changed_when: true
  # Using shell because there's no dedicated ansible module for Laravel Artisan commands

- name: configure | Clear Laravel routes for {{ market }}
  ansible.builtin.shell: php artisan route:clear
  args:
    chdir: "/v2-markets/prod_{{ market }}/server/production"
    executable: /bin/bash
  become: true
  register: tap_artisan_route_clear
  failed_when: false
  changed_when: true
  # Using shell because there's no dedicated ansible module for Laravel Artisan commands

- name: configure | Restart Supervisor for {{ market }}
  community.general.supervisorctl:
    name: "prod_{{ market }}"
    state: restarted
  become: true
  register: tap_supervisor_result
  failed_when: false

- name: configure | Notify release via artisan for {{ market }}
  ansible.builtin.shell: php artisan release_notification:notify --force
  args:
    chdir: "/v2-markets/prod_{{ market }}/server/production"
    executable: /bin/bash
  become: true
  register: tap_artisan_notify_result
  failed_when: false
  changed_when: true
  # Using shell because there's no dedicated ansible module for Laravel Artisan commands

# Translation import is handled separately as per manual script structure

- name: configure | Sync translations for {{ market }}
  ansible.builtin.shell: php artisan sync:translations --filename={{ tap_translation_file }}
  when: tap_translation_sync_enabled | bool and tap_translation_file is defined
  args:
    chdir: "/v2-markets/prod_{{ market }}/server/production"
    executable: /bin/bash
  become: true
  register: tap_sync_translations_result
  failed_when: false
  changed_when: true
  # Using shell because there's no dedicated ansible module for Laravel Artisan commands

#########################################
# Copy Frontend Code
#########################################
- name: configure | Check if frontend deployment already exists for {{ market }}
  ansible.builtin.stat:
    path: "/www/prod_{{ market }}/nespresso_ev2-client/.git"
  register: tap_frontend_git_exists

- name: configure | Git stash frontend changes for {{ market }}
  ansible.builtin.command: git stash  # noqa: command-instead-of-module
  args:
    chdir: "/www/prod_{{ market }}/nespresso_ev2-client"
  become: true
  when: tap_frontend_git_exists.stat.exists and tap_git_stash_enabled | bool
  register: tap_frontend_git_stash
  failed_when: false
  changed_when: true
  # Using command because ansible.builtin.git module doesn't support stash operations

- name: configure | Git pull latest code for frontend deployment {{ market }}
  ansible.builtin.git:
    repo: "{{ tap_frontend_repo_url }}"
    dest: "{{ tap_git_clone_path }}_frontend_{{ market }}"
    version: "{{ tap_app_git_branch }}"
    force: true
  become: true
  when: tap_frontend_git_exists.stat.exists and tap_git_pull_enabled | bool
  register: tap_frontend_git_pull
  failed_when: false

- name: configure | Copy updated frontend code for {{ market }}
  ansible.builtin.copy:
    src: "{{ tap_git_clone_path }}_frontend_{{ market }}/nespresso-test/new_infra_tap_source/front/nespresso_ev2-client-master/"
    dest: "/www/prod_{{ market }}/nespresso_ev2-client/"
    remote_src: true
    mode: preserve
  become: true
  when: tap_frontend_git_pull is defined and not tap_frontend_git_pull.skipped and not (tap_frontend_git_pull.failed | default(false))
  register: tap_frontend_update_copy

- name: configure | Check if frontend source directory exists for {{ market }}
  ansible.builtin.stat:
    path: "{{ tap_frontend_source_path }}"
  register: tap_frontend_source_stat

- name: configure | Copy frontend code (new deployment) for {{ market }}
  ansible.builtin.copy:
    src: "{{ tap_frontend_source_path }}/"
    dest: "/www/prod_{{ market }}/nespresso_ev2-client/"
    remote_src: true
    mode: preserve
  become: true
  when: tap_frontend_source_stat.stat.exists and not tap_frontend_git_exists.stat.exists
  register: tap_frontend_copy_result

- name: configure | Create minimal frontend structure if source missing for {{ market }}
  ansible.builtin.file:
    path: "/www/prod_{{ market }}/nespresso_ev2-client/dist/{{ tap_version }}"
    state: directory
    mode: '0755'
    recurse: true
  become: true
  when: not tap_frontend_source_stat.stat.exists

#########################################
# Build Frontend (NPM)
#########################################
- name: configure | Create npm cache directory for {{ market }}
  ansible.builtin.file:
    path: "/mnt/npm-cache-{{ market }}"
    state: directory
    mode: '0755'
  become: true

- name: configure | Install npm dependencies (matching manual script) for {{ market }}
  community.general.npm:
    path: "/www/prod_{{ market }}/nespresso_ev2-client"
    ci: "{{ not tap_use_npm_install | bool }}"
    production: false
  become: true
  register: tap_npm_install_result
  failed_when: false
  async: 900
  poll: 30
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"

- name: configure | Build frontend for {{ market }}
  ansible.builtin.command: npm run pub
  args:
    chdir: "/www/prod_{{ market }}/nespresso_ev2-client"
  become: true
  register: tap_npm_build_result
  failed_when: false
  changed_when: true
  async: 900
  poll: 30
  environment:
    NODE_OPTIONS: "{{ tap_node_options }}"
  # Using command because npm module doesn't support script parameter

#########################################
# Publish Frontend Version
#########################################
- name: configure | Create version directory if missing for {{ market }}
  ansible.builtin.file:
    path: "/www/prod_{{ market }}/nespresso_ev2-client/dist/{{ tap_version }}"
    state: directory
    mode: '0755'
  become: true

- name: configure | Check if production symlink exists for {{ market }}
  ansible.builtin.stat:
    path: "/www/prod_{{ market }}/nespresso_ev2-client/dist/production"
  register: tap_production_link_stat

- name: configure | Remove existing production symlink (matching publish.sh) for {{ market }}
  ansible.builtin.file:
    path: "/www/prod_{{ market }}/nespresso_ev2-client/dist/production"
    state: absent
  become: true
  when: tap_production_link_stat.stat.exists

- name: configure | Create production symlink (matching publish.sh) for {{ market }}
  ansible.builtin.file:
    src: "{{ tap_version }}"
    dest: "/www/prod_{{ market }}/nespresso_ev2-client/dist/production"
    state: link
  become: true
  when: tap_version is defined

#########################################
# Cleanup
#########################################
- name: configure | Clean up npm cache for {{ market }}
  ansible.builtin.file:
    path: "/mnt/npm-cache-{{ market }}"
    state: absent
  become: true
  failed_when: false

- name: configure | Clean up temporary git clone directories for {{ market }}
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ tap_git_clone_path }}_backend_{{ market }}"
    - "{{ tap_git_clone_path }}_frontend_{{ market }}"
  become: true
  failed_when: false

- name: configure | Find ansible temporary files
  ansible.builtin.find:
    paths: /tmp
    patterns: "ansible-*"
    file_type: any
  register: tap_ansible_temp_files
  become: true
  failed_when: false

- name: configure | Remove ansible temporary files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ tap_ansible_temp_files.files | default([]) }}"
  become: true
  failed_when: false

- name: configure | Show deployment summary for {{ market }}
  ansible.builtin.debug:
    msg:
      - "TAP deployment completed for market: {{ market }}"
      - "Backend: /v2-markets/prod_{{ market }}/server/production/"
      - "Frontend: /www/prod_{{ market }}/nespresso_ev2-client/dist/production/"
      - "Version: {{ tap_version }}"
